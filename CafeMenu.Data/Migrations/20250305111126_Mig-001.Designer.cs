// <auto-generated />
using System;
using CafeMenu.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CafeMenu.Data.Migrations
{
    [DbContext(typeof(CafeContext))]
    [Migration("20250305111126_Mig-001")]
    partial class Mig001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CafeMenu.Data.Entities.Customer.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.History.DeleteHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeletedRowId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("DeleteHistories");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.ExteraOnItem", b =>
                {
                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("ExteraOnItemDecription")
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("ExteraOnItemPrice")
                        .HasColumnType("int");

                    b.Property<string>("ExteraTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ExtraId");

                    b.ToTable("ExteraOnItems");

                    b.HasData(
                        new
                        {
                            ExtraId = 1,
                            ExteraOnItemDecription = "250gm vanilla ice cream",
                            ExteraOnItemPrice = 20000,
                            ExteraTitle = "Ice Cream",
                            IsDeleted = false
                        },
                        new
                        {
                            ExtraId = 2,
                            ExteraOnItemDecription = "200gm Cream",
                            ExteraOnItemPrice = 40000,
                            ExteraTitle = "Cream",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("ItemGroupId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ItemImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ItemIngredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemGroupId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            IsDeleted = false,
                            ItemGroupId = (byte)1,
                            ItemImage = "https://hooklounge.vip/Media_folder/222/img_222_1624714287.jpg",
                            ItemIngredient = "coffe beans",
                            ItemName = "Espresso"
                        });
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.ItemDifference", b =>
                {
                    b.Property<int>("DifferenceId")
                        .HasColumnType("int");

                    b.Property<string>("DifferenceTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemDifferncePrice")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.HasKey("DifferenceId");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemDifferences");

                    b.HasData(
                        new
                        {
                            DifferenceId = 1,
                            DifferenceTitle = "100% Arabica",
                            IsDeleted = false,
                            ItemDifferncePrice = 120000,
                            ItemID = 1
                        },
                        new
                        {
                            DifferenceId = 2,
                            DifferenceTitle = "20% Arabica",
                            IsDeleted = false,
                            ItemDifferncePrice = 70000,
                            ItemID = 1
                        });
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.ItemExteraOnItemConnection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .HasColumnType("int");

                    b.Property<int>("ExteraItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("ConnectionId");

                    b.HasIndex("ExteraItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemExteraOnItemConnections");

                    b.HasData(
                        new
                        {
                            ConnectionId = 1,
                            ExteraItemId = 1,
                            IsDeleted = false,
                            ItemId = 1
                        },
                        new
                        {
                            ConnectionId = 2,
                            ExteraItemId = 2,
                            IsDeleted = false,
                            ItemId = 1
                        });
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.slectlistitem", b =>
                {
                    b.Property<byte>("GroupId")
                        .HasColumnType("tinyint");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("MenuTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("GroupId");

                    b.HasIndex("MenuTypeId");

                    b.ToTable("ItemGroups");

                    b.HasData(
                        new
                        {
                            GroupId = (byte)1,
                            GroupName = "Espresso Base",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)2,
                            GroupName = "Hot Base",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)3,
                            GroupName = "Iced Base",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)4,
                            GroupName = "Brew Base",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)5,
                            GroupName = "Matcha Base",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)6,
                            GroupName = "Milkshake",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)7,
                            GroupName = "Breakfast",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)8,
                            GroupName = "Bakery",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)9,
                            GroupName = "Fitness",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)10,
                            GroupName = "Brunch",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)11,
                            GroupName = "Mocktail",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)12,
                            GroupName = "Tea and herbal",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        },
                        new
                        {
                            GroupId = (byte)13,
                            GroupName = "Others",
                            IsDeleted = false,
                            MenuTypeId = (byte)1
                        });
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.MenuType", b =>
                {
                    b.Property<byte>("MenuTypeId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MenuTypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("MenuTypeId");

                    b.ToTable("MenuTypes");

                    b.HasData(
                        new
                        {
                            MenuTypeId = (byte)1,
                            IsDeleted = false,
                            MenuTypeTitle = "Cafe"
                        });
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderSum")
                        .HasColumnType("int");

                    b.Property<byte?>("TableId")
                        .HasColumnType("tinyint");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.SubOrder", b =>
                {
                    b.Property<int>("SubOrderId")
                        .HasColumnType("int");

                    b.Property<byte>("Count")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemDifferenceId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("SubOrderId");

                    b.HasIndex("ItemDifferenceId");

                    b.HasIndex("OrderId");

                    b.ToTable("SubOrders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.SubOrderExtraOnItemConnection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .HasColumnType("int");

                    b.Property<byte>("Count")
                        .HasColumnType("tinyint");

                    b.Property<int>("ExteraOnItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SubOrderId")
                        .HasColumnType("int");

                    b.HasKey("ConnectionId");

                    b.HasIndex("ExteraOnItemId");

                    b.HasIndex("SubOrderId");

                    b.ToTable("SubOrderExtraOnItemConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Table", b =>
                {
                    b.Property<byte>("TableId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("TableId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = (byte)1,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)2,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)3,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)4,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)5,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)6,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)7,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)8,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)9,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)10,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)11,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)12,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)13,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)14,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)15,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)16,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)17,
                            IsDeleted = false
                        },
                        new
                        {
                            TableId = (byte)18,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.Item", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Item.slectlistitem", "ItemGroup")
                        .WithMany("Items")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemGroup");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.ItemDifference", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Item.Item", "Item")
                        .WithMany("ItemDifferences")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.ItemExteraOnItemConnection", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Item.ExteraOnItem", "ExteraOnItem")
                        .WithMany("itemExteraOnItemConnections")
                        .HasForeignKey("ExteraItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Item.Item", "Item")
                        .WithMany("ItemExteraOnItemConnections")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExteraOnItem");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.slectlistitem", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.MenuType", "MenuType")
                        .WithMany("ItemGroups")
                        .HasForeignKey("MenuTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuType");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Order", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Customer.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Order.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId");

                    b.Navigation("Customer");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.SubOrder", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Item.ItemDifference", "ItemDifference")
                        .WithMany("SubOrders")
                        .HasForeignKey("ItemDifferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Order.Order", "Order")
                        .WithMany("SubOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemDifference");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.SubOrderExtraOnItemConnection", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Item.ExteraOnItem", "ExteraOnItem")
                        .WithMany("SubOrderExtraOnItemConnection")
                        .HasForeignKey("ExteraOnItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Order.SubOrder", "SubOrder")
                        .WithMany("SubOrderExtraOnItemConnections")
                        .HasForeignKey("SubOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExteraOnItem");

                    b.Navigation("SubOrder");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Customer.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.ExteraOnItem", b =>
                {
                    b.Navigation("SubOrderExtraOnItemConnection");

                    b.Navigation("itemExteraOnItemConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.Item", b =>
                {
                    b.Navigation("ItemDifferences");

                    b.Navigation("ItemExteraOnItemConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.ItemDifference", b =>
                {
                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Item.slectlistitem", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.MenuType", b =>
                {
                    b.Navigation("ItemGroups");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Order", b =>
                {
                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.SubOrder", b =>
                {
                    b.Navigation("SubOrderExtraOnItemConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Table", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
